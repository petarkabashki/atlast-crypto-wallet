# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class curve_point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_example.curve_point_x_get, _example.curve_point_x_set)
    y = property(_example.curve_point_y_get, _example.curve_point_y_set)

    def __init__(self):
        _example.curve_point_swiginit(self, _example.new_curve_point())
    __swig_destroy__ = _example.delete_curve_point

# Register curve_point in _example:
_example.curve_point_swigregister(curve_point)

class ecdsa_curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    prime = property(_example.ecdsa_curve_prime_get, _example.ecdsa_curve_prime_set)
    G = property(_example.ecdsa_curve_G_get, _example.ecdsa_curve_G_set)
    order = property(_example.ecdsa_curve_order_get, _example.ecdsa_curve_order_set)
    order_half = property(_example.ecdsa_curve_order_half_get, _example.ecdsa_curve_order_half_set)
    a = property(_example.ecdsa_curve_a_get, _example.ecdsa_curve_a_set)
    b = property(_example.ecdsa_curve_b_get, _example.ecdsa_curve_b_set)

    def __init__(self):
        _example.ecdsa_curve_swiginit(self, _example.new_ecdsa_curve())
    __swig_destroy__ = _example.delete_ecdsa_curve

# Register ecdsa_curve in _example:
_example.ecdsa_curve_swigregister(ecdsa_curve)

MAX_ADDR_RAW_SIZE = _example.MAX_ADDR_RAW_SIZE
MAX_ADDR_SIZE = _example.MAX_ADDR_SIZE
MAX_WIF_RAW_SIZE = _example.MAX_WIF_RAW_SIZE
MAX_WIF_SIZE = _example.MAX_WIF_SIZE

def point_copy(cp1, cp2):
    return _example.point_copy(cp1, cp2)

def point_add(curve, cp1, cp2):
    return _example.point_add(curve, cp1, cp2)

def point_double(curve, cp):
    return _example.point_double(curve, cp)

def point_multiply(curve, k, p, res):
    return _example.point_multiply(curve, k, p, res)

def point_set_infinity(p):
    return _example.point_set_infinity(p)

def point_is_infinity(p):
    return _example.point_is_infinity(p)

def point_is_equal(p, q):
    return _example.point_is_equal(p, q)

def point_is_negative_of(p, q):
    return _example.point_is_negative_of(p, q)

def scalar_multiply(curve, k, res):
    return _example.scalar_multiply(curve, k, res)

def ecdh_multiply(curve, priv_key, pub_key, session_key):
    return _example.ecdh_multiply(curve, priv_key, pub_key, session_key)

def compress_coords(cp, compressed):
    return _example.compress_coords(cp, compressed)

def uncompress_coords(curve, odd, x, y):
    return _example.uncompress_coords(curve, odd, x, y)

def ecdsa_uncompress_pubkey(curve, pub_key, uncompressed):
    return _example.ecdsa_uncompress_pubkey(curve, pub_key, uncompressed)

def ecdsa_sign(curve, hasher_sign, priv_key, msg, msg_len, sig, pby, is_canonical):
    return _example.ecdsa_sign(curve, hasher_sign, priv_key, msg, msg_len, sig, pby, is_canonical)

def ecdsa_sign_digest(curve, priv_key, digest, sig, pby, is_canonical):
    return _example.ecdsa_sign_digest(curve, priv_key, digest, sig, pby, is_canonical)

def ecdsa_get_public_key33(curve, priv_key, pub_key):
    return _example.ecdsa_get_public_key33(curve, priv_key, pub_key)

def ecdsa_get_public_key65(curve, priv_key, pub_key):
    return _example.ecdsa_get_public_key65(curve, priv_key, pub_key)

def ecdsa_get_pubkeyhash(pub_key, hasher_pubkey, pubkeyhash):
    return _example.ecdsa_get_pubkeyhash(pub_key, hasher_pubkey, pubkeyhash)

def ecdsa_get_address_raw(pub_key, version, hasher_pubkey, addr_raw):
    return _example.ecdsa_get_address_raw(pub_key, version, hasher_pubkey, addr_raw)

def ecdsa_get_address(pub_key, version, hasher_pubkey, hasher_base58, addr, addrsize):
    return _example.ecdsa_get_address(pub_key, version, hasher_pubkey, hasher_base58, addr, addrsize)

def ecdsa_get_address_segwit_p2sh_raw(pub_key, version, hasher_pubkey, addr_raw):
    return _example.ecdsa_get_address_segwit_p2sh_raw(pub_key, version, hasher_pubkey, addr_raw)

def ecdsa_get_address_segwit_p2sh(pub_key, version, hasher_pubkey, hasher_base58, addr, addrsize):
    return _example.ecdsa_get_address_segwit_p2sh(pub_key, version, hasher_pubkey, hasher_base58, addr, addrsize)

def ecdsa_get_wif(priv_key, version, hasher_base58, wif, wifsize):
    return _example.ecdsa_get_wif(priv_key, version, hasher_base58, wif, wifsize)

def ecdsa_address_decode(addr, version, hasher_base58, out):
    return _example.ecdsa_address_decode(addr, version, hasher_base58, out)

def ecdsa_read_pubkey(curve, pub_key, pub):
    return _example.ecdsa_read_pubkey(curve, pub_key, pub)

def ecdsa_validate_pubkey(curve, pub):
    return _example.ecdsa_validate_pubkey(curve, pub)

def ecdsa_verify(curve, hasher_sign, pub_key, sig, msg, msg_len):
    return _example.ecdsa_verify(curve, hasher_sign, pub_key, sig, msg, msg_len)

def ecdsa_verify_digest(curve, pub_key, sig, digest):
    return _example.ecdsa_verify_digest(curve, pub_key, sig, digest)

def ecdsa_recover_pub_from_sig(curve, pub_key, sig, digest, recid):
    return _example.ecdsa_recover_pub_from_sig(curve, pub_key, sig, digest, recid)

def ecdsa_sig_to_der(sig, der):
    return _example.ecdsa_sig_to_der(sig, der)


